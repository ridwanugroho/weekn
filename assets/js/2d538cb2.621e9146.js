"use strict";(self.webpackChunkweekn=self.webpackChunkweekn||[]).push([[4254],{5336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"on-job-projects/DevOps/azure-artifact","title":"Private NuGet in Azure Artifact","description":"When you have sets of useful class lib project and other team want to utilize it, you have to start thinking to put it in accessible storage rather than re-distribute every time you update it. It is ok to store it in places like \\"limited-access drive\\" if you are the libs author, but it would be a pain for others who consume it. Above is a practice we are running using Azure DevOps:","source":"@site/docs/on-job-projects/DevOps/0-azure-artifact.md","sourceDirName":"on-job-projects/DevOps","slug":"/on-job-projects/DevOps/azure-artifact","permalink":"/weekn/docs/on-job-projects/DevOps/azure-artifact","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{},"sidebar":"onJobProjectSidebar","previous":{"title":"ERP Integration","permalink":"/weekn/docs/on-job-projects/Dealership System/erp-integration"}}');var r=n(4848),s=n(8453);const o={},a="Private NuGet in Azure Artifact",c={},u=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"private-nuget-in-azure-artifact",children:"Private NuGet in Azure Artifact"})}),"\n",(0,r.jsx)(t.p,{children:'When you have sets of useful class lib project and other team want to utilize it, you have to start thinking to put it in accessible storage rather than re-distribute every time you update it. It is ok to store it in places like "limited-access drive" if you are the libs author, but it would be a pain for others who consume it. Above is a practice we are running using Azure DevOps:'}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:'Use Azure pipelines to checkout code from repository, build it, set the version based on "centralized assembly version" stated in the code (if you prefer set the version separately, it is completely ok), and push it to Azure Artifact. In this case, we develop the library in C# and we can set version for entire projects by using Directory.Build.props. Make sure you already set pipeline permission to push artifact.'}),"\n",(0,r.jsxs)(t.li,{children:['At the library consumer side, some adjustment are needed. Since we set the artifact access limited, you need to make sure that your devops user has access to read the artifact, then make your "local development environment" able to read the artifact using artifact. (The using of azure artifact credential manager is explained ',(0,r.jsx)(t.a,{href:"https://github.com/microsoft/artifacts-credprovider",children:"here"}),")"]}),"\n",(0,r.jsx)(t.li,{children:"we are also able to restore the library in out CI/CD pipeline. You need to add service connection if the artifact feed placed outside you organization. If your feed is in the same organization, you only need to grant permission to build agent user for accessing the feed."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"alt text",src:n(8666).A+"",width:"959",height:"621"})}),"\n",(0,r.jsxs)(t.p,{children:["Here is the pipeline example,  the following pipeline include auto detect assembly version stated in ",(0,r.jsx)(t.code,{children:"Directory.Build.props"})," file. This script also add build number (auto generated by azure build) after the version, you can remove it if you don\u2019t want to implement."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"trigger: none\n\npool:\n  vmImage: ubuntu-22.04\n\nsteps:\n# Install NuGet\n- task: NuGetToolInstaller@1\n  displayName: 'NuGet Tool Installer'\n\n# Authenticate to the feed\n- task: NuGetAuthenticate@1\n  displayName: 'NuGet Authenticate'\n\n# Extract versi from Directory.Build.props\n- task: PowerShell@2\n  displayName: 'Extract version from Directory.Build.props'\n  inputs:\n    targetType: inline\n    script: |    \n      [xml]$props = Get-Content \"$(Build.SourcesDirectory)/Directory.Build.props\"\n      $assemblyVersion = $props.Project.PropertyGroup.AssemblyVersion\n      $fileVersion = $props.Project.PropertyGroup.FileVersion\n      $versionSuffix = $props.Project.PropertyGroup.VersionSuffix\n\n      if ([string]::IsNullOrWhiteSpace($assemblyVersion)) { \n        Write-Error \"AssemblyVersion not found in Directory.Build.props\" \n        exit 1 \n      }\n\n      $packageVersion = $assemblyVersion\n      if (-not [string]::IsNullOrWhiteSpace($versionSuffix)) {\n        $packageVersion = \"$assemblyVersion-$versionSuffix.$(Build.BuildId)\"\n      }\n\n      Write-Host \"##vso[task.setvariable variable=PackageVersion]$packageVersion\"\n      Write-Host \"Resolved PackageVersion: $packageVersion\"\n\n# Pack nuget with verson from PackageVersion assigned in above script\n- task: DotNetCoreCLI@2\n  displayName: 'Pack NuGet packages'\n  inputs:\n    command: 'pack'\n    packagesToPack: '**/*.csproj'\n    includesymbols: true\n    includesource: true\n    versioningScheme: 'byEnvVar'\n    versionEnvVar: 'PackageVersion'\n\n# Push to feed\n- task: NuGetCommand@2\n  displayName: 'Push NuGet packages'\n  inputs:\n    command: 'push'\n    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'\n    nuGetFeedType: 'internal'\n    publishVstsFeed: '{your-feed-name}'\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},8666:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/image-6195a6003c777541abb85303d701682d.png"}}]);